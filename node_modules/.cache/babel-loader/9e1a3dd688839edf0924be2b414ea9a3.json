{"ast":null,"code":"// initializeApp creates an app instance for you, based off of some kind of config.\n// this config is an object that allows us to to attach the firebase/app to the one we have made online\nimport { initializeApp } from 'firebase/app'; // install our authentication. Using these to create our google sign in.\n\nimport { getAuth, // to create auth instance\nsignInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { setFirestore, doc, getDoc, setDoc, getFirestore } from 'firebase/firestore'; // Your web app's Firebase configuration. Our own config.\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCW5XqDgMmuHl4D_D5bigU1o3YwWF1jLNw\",\n  // not super secret. \n  authDomain: \"crwn-clothing-db-a122c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a122c\",\n  // unique identifier for instance\n  storageBucket: \"crwn-clothing-db-a122c.appspot.com\",\n  messagingSenderId: \"644273913632\",\n  appId: \"1:644273913632:web:b3a70d0c7827b4a3b26145\"\n}; // Initialize Firebase. identifies this SDK library that\n//  extracts some of the func we need to interact with our instance of firebase. (CRUD)\n\nconst firebaseApp = initializeApp(firebaseConfig); // to use google auth, we initialise a provider using this google auth provider.\n// gives you back this prov instance. GoogleAuthProvider() is essentially a class. \n\nconst provider = new GoogleAuthProvider(); // this takes some kind of config and we can state how we want it to behave\n\nprovider.setCustomParameters({\n  prompt: 'select_account' // every time someonce interacts, force them to select account.\n\n}); // export auth, create instance\n\nexport const auth = getAuth(); // export out sign in with popup, pass auth and provider. \n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","setFirestore","doc","getDoc","setDoc","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log"],"sources":["/Users/gabrielnathan/WEBSITES/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["\n// initializeApp creates an app instance for you, based off of some kind of config.\n// this config is an object that allows us to to attach the firebase/app to the one we have made online\nimport { initializeApp } from 'firebase/app';\n\n// install our authentication. Using these to create our google sign in.\nimport { \n  getAuth, // to create auth instance\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider\n} from 'firebase/auth';\n\nimport {\n  setFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  getFirestore\n} from 'firebase/firestore'\n\n// Your web app's Firebase configuration. Our own config.\nconst firebaseConfig = { \n  apiKey: \"AIzaSyCW5XqDgMmuHl4D_D5bigU1o3YwWF1jLNw\", // not super secret. \n  authDomain: \"crwn-clothing-db-a122c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a122c\", // unique identifier for instance\n  storageBucket: \"crwn-clothing-db-a122c.appspot.com\",\n  messagingSenderId: \"644273913632\",\n  appId: \"1:644273913632:web:b3a70d0c7827b4a3b26145\"\n};\n\n// Initialize Firebase. identifies this SDK library that\n//  extracts some of the func we need to interact with our instance of firebase. (CRUD)\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// to use google auth, we initialise a provider using this google auth provider.\n// gives you back this prov instance. GoogleAuthProvider() is essentially a class. \nconst provider = new GoogleAuthProvider();\n\n// this takes some kind of config and we can state how we want it to behave\nprovider.setCustomParameters({\n  prompt: 'select_account' // every time someonce interacts, force them to select account.\n});\n\n// export auth, create instance\nexport const auth = getAuth(); \n// export out sign in with popup, pass auth and provider. \nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider); \n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  console.log(userDocRef);\n};"],"mappings":"AACA;AACA;AACA,SAASA,aAAT,QAA8B,cAA9B,C,CAEA;;AACA,SACEC,OADF,EACW;AACTC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,QAKO,eALP;AAOA,SACEC,YADF,EAEEC,GAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,YALF,QAMO,oBANP,C,CAQA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAC8B;EACnDC,UAAU,EAAE,wCAFS;EAGrBC,SAAS,EAAE,wBAHU;EAGgB;EACrCC,aAAa,EAAE,oCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;AACA;;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAD,CAAjC,C,CAEA;AACA;;AACA,MAAMQ,QAAQ,GAAG,IAAId,kBAAJ,EAAjB,C,CAEA;;AACAc,QAAQ,CAACC,mBAAT,CAA6B;EAC3BC,MAAM,EAAE,gBADmB,CACF;;AADE,CAA7B,E,CAIA;;AACA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAApB,C,CACP;;AACA,OAAO,MAAMqB,qBAAqB,GAAG,MAAMnB,eAAe,CAACkB,IAAD,EAAOH,QAAP,CAAnD;AAEP,OAAO,MAAMK,EAAE,GAAGd,YAAY,EAAvB;AAEP,OAAO,MAAMe,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;EAC5D,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB;EAEAC,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACD,CAJM"},"metadata":{},"sourceType":"module"}
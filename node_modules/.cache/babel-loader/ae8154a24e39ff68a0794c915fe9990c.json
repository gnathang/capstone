{"ast":null,"code":"// We are writing logic in here, to protect our frontend application from this \n// external service, firebase in this case, that is subject to change.\n// We define how it is that this service will interface with our frontend app\n// by adding this utils file as a later between the frontend code and this additional firebase library\n// initializeApp creates an app instance for you, based off of some kind of config.\n// this config is an object that allows us to to attach the firebase/app to the one we have made online\nimport { initializeApp } from 'firebase/app'; // install our authentication. Using these to create our google sign in.\n\nimport { getAuth, // to create auth instance\nsignInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth'; // the email/password provider is native to firebase/auth so no need for import,\n// but we do need createUserWithEmailAndPassword.\n// firestore is a different service. \n// we need to instatiate our firestore instance.\n\nimport { setFirestore, doc, // retreive doc from inside firestore database\ngetDoc, // access the docs DATA\nsetDoc, // setting the docs DATA\ngetFirestore } from 'firebase/firestore'; // Your web app's Firebase configuration. Our own config.\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCW5XqDgMmuHl4D_D5bigU1o3YwWF1jLNw\",\n  // not super secret. \n  authDomain: \"crwn-clothing-db-a122c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a122c\",\n  // unique identifier for instance\n  storageBucket: \"crwn-clothing-db-a122c.appspot.com\",\n  messagingSenderId: \"644273913632\",\n  appId: \"1:644273913632:web:b3a70d0c7827b4a3b26145\"\n}; // Initialize Firebase. identifies this SDK library that\n//  extracts some of the func we need to interact with our instance of firebase. (CRUD)\n\nconst firebaseApp = initializeApp(firebaseConfig); // to use google auth, we initialise a provider using this google auth provider.\n//  we can use other providers too.\n// gives you back this prov instance. GoogleAuthProvider() is essentially a class. \n\nconst provider = new GoogleAuthProvider(); // this takes some kind of config and we can state how we want it to behave\n\nprovider.setCustomParameters({\n  prompt: 'select_account' // every time someonce interacts, force them to select account.\n\n}); // export auth, create instance\n\nexport const auth = getAuth(); // export out sign in with popup, pass auth and provider. \n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider); // firestore. create the database. equal to calling getFrestore();\n// telling firebase when we wanna get a documer, set a document. we pass the database.\n\nexport const db = getFirestore(); // create a method - async function that receives some use authentication object.\n// we want a function that will take the data fromt the auth service and then store it in firestore\n// in this case it is the user sign-in.\n\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // we need to check if there's an existing document reference. \n  // doc takes 3 args.. 1-database, 2-collection 3-identifier.\n  if (!userAuth) return; // protect our code. Don't run the function unless we get the values. \n\n  const userDocRef = doc(db, 'users', userAuth.uid); // if we don't have an existing doc ref, google will still generate one for us.\n\n  console.log(userDocRef); // gives back an object that represents some doc ref in the database.\n  // but we don't get a value, but we get back the uid and path to collection uid.\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot.exists()); // points to same id as above, but this is a speial object\n  // on this are different ways we can ascertain whether this document exists.\n  // if user data does not exist we need to to do the following:\n  // create / set the document with the data from userAuth in my collection.\n  // the bang (!) reverses it, so if it doesn't exist then it will return true and statement will run\n\n  if (!userSnapshot.exists()) {\n    // create creds and a date object.\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // try catch block. 'i want you to try something aysncronously,\n    // and if it fails then catch the error and do something with it.\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // if user data DOES exist then it's simple:\n\n\n  return userDocRef;\n}; // We need an email and a password for this object.\n// If we don't get either, then we don't call this method.\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return; // this won't run unless we get both the above values.\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n}; // The same here, except for the sign in form.\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return; // this won't run unless we get both the above values.\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = () => signOut(auth);","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","setFirestore","doc","getDoc","setDoc","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser"],"sources":["/Users/gabrielnathan/WEBSITES/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// We are writing logic in here, to protect our frontend application from this \n// external service, firebase in this case, that is subject to change.\n// We define how it is that this service will interface with our frontend app\n// by adding this utils file as a later between the frontend code and this additional firebase library\n\n\n// initializeApp creates an app instance for you, based off of some kind of config.\n// this config is an object that allows us to to attach the firebase/app to the one we have made online\nimport { initializeApp } from 'firebase/app';\n\n// install our authentication. Using these to create our google sign in.\nimport { \n  getAuth, // to create auth instance\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n} from 'firebase/auth';\n// the email/password provider is native to firebase/auth so no need for import,\n// but we do need createUserWithEmailAndPassword.\n\n// firestore is a different service. \n// we need to instatiate our firestore instance.\nimport {\n  setFirestore,\n  doc, // retreive doc from inside firestore database\n  getDoc, // access the docs DATA\n  setDoc, // setting the docs DATA\n  getFirestore\n} from 'firebase/firestore'\n\n// Your web app's Firebase configuration. Our own config.\nconst firebaseConfig = { \n  apiKey: \"AIzaSyCW5XqDgMmuHl4D_D5bigU1o3YwWF1jLNw\", // not super secret. \n  authDomain: \"crwn-clothing-db-a122c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a122c\", // unique identifier for instance\n  storageBucket: \"crwn-clothing-db-a122c.appspot.com\",\n  messagingSenderId: \"644273913632\",\n  appId: \"1:644273913632:web:b3a70d0c7827b4a3b26145\"\n};\n\n// Initialize Firebase. identifies this SDK library that\n//  extracts some of the func we need to interact with our instance of firebase. (CRUD)\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// to use google auth, we initialise a provider using this google auth provider.\n//  we can use other providers too.\n// gives you back this prov instance. GoogleAuthProvider() is essentially a class. \nconst provider = new GoogleAuthProvider();\n\n// this takes some kind of config and we can state how we want it to behave\nprovider.setCustomParameters({\n  prompt: 'select_account' // every time someonce interacts, force them to select account.\n});\n\n// export auth, create instance\nexport const auth = getAuth(); \n// export out sign in with popup, pass auth and provider. \nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n// firestore. create the database. equal to calling getFrestore();\n// telling firebase when we wanna get a documer, set a document. we pass the database.\nexport const db = getFirestore();\n\n// create a method - async function that receives some use authentication object.\n// we want a function that will take the data fromt the auth service and then store it in firestore\n// in this case it is the user sign-in.\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  // we need to check if there's an existing document reference. \n  // doc takes 3 args.. 1-database, 2-collection 3-identifier.\n  if (!userAuth) return; // protect our code. Don't run the function unless we get the values. \n  const userDocRef = doc(db, 'users', userAuth.uid);\n  // if we don't have an existing doc ref, google will still generate one for us.\n  console.log(userDocRef); // gives back an object that represents some doc ref in the database.\n  // but we don't get a value, but we get back the uid and path to collection uid.\n\n  const userSnapshot = await getDoc(userDocRef);  \n  console.log(userSnapshot.exists()); // points to same id as above, but this is a speial object\n  // on this are different ways we can ascertain whether this document exists.\n\n  // if user data does not exist we need to to do the following:\n  // create / set the document with the data from userAuth in my collection.\n  // the bang (!) reverses it, so if it doesn't exist then it will return true and statement will run\n  if (!userSnapshot.exists()) {\n    // create creds and a date object.\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    // try catch block. 'i want you to try something aysncronously,\n    // and if it fails then catch the error and do something with it.\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  // if user data DOES exist then it's simple:\n  return userDocRef;\n};\n\n// We need an email and a password for this object.\n// If we don't get either, then we don't call this method.\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  // this won't run unless we get both the above values.\n  return await createUserWithEmailAndPassword(auth, email, password);\n}\n\n// The same here, except for the sign in form.\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  // this won't run unless we get both the above values.\n  return await signInWithEmailAndPassword(auth, email, password);\n} \n\nexport const signOutUser = () => signOut(auth);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
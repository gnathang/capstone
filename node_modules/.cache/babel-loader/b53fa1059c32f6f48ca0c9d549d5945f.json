{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnathan/WEBSITES/crwn-clothing/src/contexts/user.context.jsx\",\n    _s = $RefreshSig$();\n\n// this is essentially just a glorified component that leverages useState!@\nimport { createContext, useState, useEffect } from 'react';\nimport { onAuthStateChangedListener, signOutUser } from '../utils/firebase/firebase.utils'; // The actual value: the context value we want to access.\n// UserContext uses createContext hook to make an object with key values initialised at null.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  // blankl function\n  setCurrentUser: () => null\n}); // The provider: allows any of its child components to access the values inside of its useState.  \n// We wrap the {children} inside .Provider, which is a component supplied by react.\n\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(null); // instatiate this value as an object. \n\n  const value = {\n    currentUser,\n    setCurrentUser\n  }; // we want to call the setter and get the currentUser value anywhere inside the component tree\n  // so we set the value of UserContext.Provider to {value}\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener(user => {\n      console.log(user);\n    });\n    return unsubscribe; // we want to unsubscribe whenever it unmounts.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n\n_s(UserProvider, \"Y5F2pQQk2LZA5WRO2+bvRm5iRuo=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","onAuthStateChangedListener","signOutUser","UserContext","currentUser","setCurrentUser","UserProvider","children","value","unsubscribe","user","console","log"],"sources":["/Users/gabrielnathan/WEBSITES/crwn-clothing/src/contexts/user.context.jsx"],"sourcesContent":["// this is essentially just a glorified component that leverages useState!@\n\nimport { createContext, useState, useEffect } from 'react';\nimport {onAuthStateChangedListener, signOutUser } from '../utils/firebase/firebase.utils'\n\n// The actual value: the context value we want to access.\n// UserContext uses createContext hook to make an object with key values initialised at null.\nexport const UserContext = createContext({\n  currentUser: null,\n  // blankl function\n  setCurrentUser: () => null, \n});\n\n// The provider: allows any of its child components to access the values inside of its useState.  \n// We wrap the {children} inside .Provider, which is a component supplied by react.\nexport const UserProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  // instatiate this value as an object. \n  const value = { currentUser, setCurrentUser };\n  // we want to call the setter and get the currentUser value anywhere inside the component tree\n  // so we set the value of UserContext.Provider to {value}\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener((user) => {\n      console.log(user);\n    });\n    return unsubscribe; // we want to unsubscribe whenever it unmounts.\n  }, []);\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n\n"],"mappings":";;;AAAA;AAEA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAAQC,0BAAR,EAAoCC,WAApC,QAAuD,kCAAvD,C,CAEA;AACA;;;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvCM,WAAW,EAAE,IAD0B;EAEvC;EACAC,cAAc,EAAE,MAAM;AAHiB,CAAD,CAAjC,C,CAMP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC5C,MAAM,CAACH,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,IAAD,CAA9C,CAD4C,CAE5C;;EACA,MAAMS,KAAK,GAAG;IAAEJ,WAAF;IAAeC;EAAf,CAAd,CAH4C,CAI5C;EACA;;EAEAL,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAGR,0BAA0B,CAAES,IAAD,IAAU;MACvDC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACD,CAF6C,CAA9C;IAGA,OAAOD,WAAP,CAJc,CAIM;EACrB,CALQ,EAKN,EALM,CAAT;EAOA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAED,KAA7B;IAAA,UAAqCD;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAfM;;GAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}
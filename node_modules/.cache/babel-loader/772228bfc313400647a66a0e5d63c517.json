{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnathan/WEBSITES/crwn-clothing/src/components/sign-in-form/sign-in-form.component.jsx\",\n    _s = $RefreshSig$();\n\n// we need useState to track the FormInput from the FormInput fields\nimport { useState, useContext } from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component'; // import context\n\nimport { UserContext } from '../../contexts/user.context';\nimport { signInWithGooglePopup, createUserDocumentFromAuth, signInAuthUserWithEmailAndPassword } from '../../utils/firebase/firebase.utils';\nimport './sign-in-form.styles.scss'; // object that allows us to keep track of multiple fields inside our form.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultFormFields = {\n  email: '',\n  password: ''\n};\n\nconst SignInForm = () => {\n  _s();\n\n  // pass usestate the defaultFormFields value, which is an object with the above values\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    email,\n    password\n  } = formFields; // init values, which will change.\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  }; // calls to databases are asyncronous\n\n\n  const signInWithGoogle = async () => {\n    const {\n      user\n    } = await signInWithGooglePopup();\n    await createUserDocumentFromAuth(user);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      // get back appropriate user auth as a response \n      const {\n        user\n      } = await signInAuthUserWithEmailAndPassword(email, password); // run setter function when handleSubmit gets the user auth as a response;\n      // use the returned { user } value to set the current user.\n\n      setCurrentUser(user);\n      resetFormFields();\n    } catch (error) {\n      // switch is like if/else. \n      // 'break' means once you've found a match, don't check the following cases.\n      switch (error.code) {\n        case 'auth/wrong-password':\n          alert('incorrect password for email');\n          break;\n\n        case 'auth/user-not-found':\n          alert('no user associated with this email');\n          break;\n\n        default:\n          console.log(error);\n      }\n    }\n  };\n\n  const handleChange = event => {\n    // the name will come through on the event. \n    // So we can tell our setState which of these fields to update\n    const {\n      name,\n      value\n    } = event.target; // set form fields to the object. the '...' SPREADS values to all fields.\n    // [name] - update appropriate field - 'take this value and apply it here, from this variable'\n    // value - gives us the value to update.\n\n    setFormFields({ ...formFields,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-up-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"I already have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"Email\",\n        type: \"email\",\n        required: true,\n        onChange: handleChange,\n        name: \"email\",\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        label: \"Password\",\n        type: \"password\",\n        required: true,\n        onChange: handleChange,\n        name: \"password\",\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          buttonType: \"google\",\n          onClick: signInWithGoogle,\n          children: \"Google sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignInForm, \"BSTP5B8VO6H/Fwu712VTuD9hH54=\");\n\n_c = SignInForm;\nexport default SignInForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInForm\");","map":{"version":3,"names":["useState","useContext","FormInput","Button","UserContext","signInWithGooglePopup","createUserDocumentFromAuth","signInAuthUserWithEmailAndPassword","defaultFormFields","email","password","SignInForm","formFields","setFormFields","resetFormFields","signInWithGoogle","user","handleSubmit","event","preventDefault","setCurrentUser","error","code","alert","console","log","handleChange","name","value","target"],"sources":["/Users/gabrielnathan/WEBSITES/crwn-clothing/src/components/sign-in-form/sign-in-form.component.jsx"],"sourcesContent":["// we need useState to track the FormInput from the FormInput fields\nimport { useState, useContext } from 'react';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\n\n// import context\nimport { UserContext } from '../../contexts/user.context'\n\nimport {\n  signInWithGooglePopup,\n  createUserDocumentFromAuth,\n  signInAuthUserWithEmailAndPassword\n} from '../../utils/firebase/firebase.utils';\n\nimport './sign-in-form.styles.scss' \n\n// object that allows us to keep track of multiple fields inside our form.\nconst defaultFormFields = {\n  email: '',\n  password: '',\n};\n\nconst SignInForm = () => {\n  // pass usestate the defaultFormFields value, which is an object with the above values\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields; // init values, which will change.\n  \n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  }\n\n  // calls to databases are asyncronous\n  const signInWithGoogle = async () => {\n    const { user } = await signInWithGooglePopup();\n  \n    await createUserDocumentFromAuth(user);\n  }\n  \n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      // get back appropriate user auth as a response \n      const {user} = await signInAuthUserWithEmailAndPassword(\n        email,\n        password\n      );\n      // run setter function when handleSubmit gets the user auth as a response;\n      // use the returned { user } value to set the current user.\n      setCurrentUser(user);\n\n      resetFormFields();\n    } catch (error) {\n      // switch is like if/else. \n      // 'break' means once you've found a match, don't check the following cases.\n      switch(error.code) {\n        case 'auth/wrong-password':\n          alert('incorrect password for email');\n          break \n        case 'auth/user-not-found':\n          alert('no user associated with this email');\n          break;\n        default:\n          console.log(error);\n      }\n    } \n\n  };\n\n\n  const handleChange = (event) => {\n    // the name will come through on the event. \n    // So we can tell our setState which of these fields to update\n    const { name, value } = event.target;\n\n    // set form fields to the object. the '...' SPREADS values to all fields.\n    // [name] - update appropriate field - 'take this value and apply it here, from this variable'\n    // value - gives us the value to update.\n    setFormFields({ ...formFields, [name]: value })\n  };\n\n  return (\n    <div className='sign-up-container'>\n      <h2>I already have an account</h2>\n      <span>Sign in with your email and password</span>\n      <form onSubmit={handleSubmit}>\n\n        <FormInput\n          label='Email'\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email}\n        /> \n\n        <FormInput\n          label='Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password}\n        />\n\n        <div className='buttons-container'>\n          <Button type='submit'>Sign In</Button>\n          <Button type='button' buttonType='google' onClick={signInWithGoogle}>Google sign in</Button>\n        </div>\n\n      </form>\n    </div>\n  );  \n}\n\nexport default SignInForm;"],"mappings":";;;AAAA;AACA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA,SACEC,qBADF,EAEEC,0BAFF,EAGEC,kCAHF,QAIO,qCAJP;AAMA,OAAO,4BAAP,C,CAEA;;;AACA,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,EADiB;EAExBC,QAAQ,EAAE;AAFc,CAA1B;;AAKA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACvB;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAACQ,iBAAD,CAA5C;EACA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBE,UAA5B,CAHuB,CAGiB;;EAExC,MAAME,eAAe,GAAG,MAAM;IAC5BD,aAAa,CAACL,iBAAD,CAAb;EACD,CAFD,CALuB,CASvB;;;EACA,MAAMO,gBAAgB,GAAG,YAAY;IACnC,MAAM;MAAEC;IAAF,IAAW,MAAMX,qBAAqB,EAA5C;IAEA,MAAMC,0BAA0B,CAACU,IAAD,CAAhC;EACD,CAJD;;EAMA,MAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;IACpCA,KAAK,CAACC,cAAN;;IAEA,IAAI;MACF;MACA,MAAM;QAACH;MAAD,IAAS,MAAMT,kCAAkC,CACrDE,KADqD,EAErDC,QAFqD,CAAvD,CAFE,CAMF;MACA;;MACAU,cAAc,CAACJ,IAAD,CAAd;MAEAF,eAAe;IAChB,CAXD,CAWE,OAAOO,KAAP,EAAc;MACd;MACA;MACA,QAAOA,KAAK,CAACC,IAAb;QACE,KAAK,qBAAL;UACEC,KAAK,CAAC,8BAAD,CAAL;UACA;;QACF,KAAK,qBAAL;UACEA,KAAK,CAAC,oCAAD,CAAL;UACA;;QACF;UACEC,OAAO,CAACC,GAAR,CAAYJ,KAAZ;MARJ;IAUD;EAEF,CA7BD;;EAgCA,MAAMK,YAAY,GAAIR,KAAD,IAAW;IAC9B;IACA;IACA,MAAM;MAAES,IAAF;MAAQC;IAAR,IAAkBV,KAAK,CAACW,MAA9B,CAH8B,CAK9B;IACA;IACA;;IACAhB,aAAa,CAAC,EAAE,GAAGD,UAAL;MAAiB,CAACe,IAAD,GAAQC;IAAzB,CAAD,CAAb;EACD,CATD;;EAWA,oBACE;IAAK,SAAS,EAAC,mBAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAM,QAAQ,EAAEX,YAAhB;MAAA,wBAEE,QAAC,SAAD;QACE,KAAK,EAAC,OADR;QAEE,IAAI,EAAC,OAFP;QAGE,QAAQ,MAHV;QAIE,QAAQ,EAAES,YAJZ;QAKE,IAAI,EAAC,OALP;QAME,KAAK,EAAEjB;MANT;QAAA;QAAA;QAAA;MAAA,QAFF,eAWE,QAAC,SAAD;QACE,KAAK,EAAC,UADR;QAEE,IAAI,EAAC,UAFP;QAGE,QAAQ,MAHV;QAIE,QAAQ,EAAEiB,YAJZ;QAKE,IAAI,EAAC,UALP;QAME,KAAK,EAAEhB;MANT;QAAA;QAAA;QAAA;MAAA,QAXF,eAoBE;QAAK,SAAS,EAAC,mBAAf;QAAA,wBACE,QAAC,MAAD;UAAQ,IAAI,EAAC,QAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE,QAAC,MAAD;UAAQ,IAAI,EAAC,QAAb;UAAsB,UAAU,EAAC,QAAjC;UAA0C,OAAO,EAAEK,gBAAnD;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QApBF;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgCD,CA3FD;;GAAMJ,U;;KAAAA,U;AA6FN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}
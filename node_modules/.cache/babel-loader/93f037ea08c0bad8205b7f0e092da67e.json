{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnathan/WEBSITES/crwn-clothing/src/components/sign-up-form/sign-up-form.component.jsx\",\n    _s = $RefreshSig$();\n\n// we need useState to track the FormInput from the FormInput fields\nimport { useState } from 'react';\nimport FormFormInput from '../form-FormInput/form-FormInput.component';\nimport { createAuthUserWithEmailAndPassword, createUserDocumentFromAuth } from '../../utils/firebase/firebase.utils';\nimport FormInput from '../form-input/form-input.component'; // object that allows us to keep track of multiple fields inside our form.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n};\n\nconst SignUpForm = () => {\n  _s();\n\n  // pass usestate the defaultFormFields value, which is an object with the above values\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = formFields; // init values, which will change.\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const authUser = createAuthUserWithEmailAndPassword();\n\n    if (password !== confirmPassword) {\n      alert('passwords do not match');\n      return;\n    }\n\n    try {\n      const {\n        user\n      } = await createAuthUserWithEmailAndPassword(email, password);\n      await createUserDocumentFromAuth(user, {\n        displayName\n      });\n      resetFormFields();\n    } catch (error) {\n      if (error.code === 'auth/email-already-in-use') {\n        alert('email already in use');\n      } else {\n        console.log('user creation error', error);\n      }\n    }\n  };\n\n  const handleChange = event => {\n    // the name will come through on the event. \n    // So we can tell our setState which of these fields to update\n    const {\n      name,\n      value\n    } = event.target; // set form fields to the object. the '...' SPREADS values to all fields.\n    // [name] - update appropriate field - 'take this value and apply it here, from this variable'\n    // value - gives us the value to update.\n\n    setFormFields({ ...formFields,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign up with Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Display Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        required: true,\n        onChange: handleChange,\n        name: \"displayName\" // we use the values we pulled off our formFields - \n        // ... so the value from the state is the value that's shown on the FormInput\n        // but it's circular - so when the user types those values in:\n        // ... our onChangeHandler pushes the values into the state!\n        // because there's overlap between the name and value, we're able to create this\n        //simple shorthand method of storing and setting this uniform object in our form. \n        ,\n        value: displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"email\",\n        required: true,\n        onChange: handleChange,\n        name: \"email\",\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"password\",\n        required: true,\n        onChange: handleChange,\n        name: \"password\",\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Confirm Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"password\",\n        required: true,\n        onChange: handleChange,\n        name: \"confirmPassword\",\n        value: confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignUpForm, \"BSTP5B8VO6H/Fwu712VTuD9hH54=\");\n\n_c = SignUpForm;\nexport default SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["useState","FormFormInput","createAuthUserWithEmailAndPassword","createUserDocumentFromAuth","FormInput","defaultFormFields","displayName","email","password","confirmPassword","SignUpForm","formFields","setFormFields","resetFormFields","handleSubmit","event","preventDefault","authUser","alert","user","error","code","console","log","handleChange","name","value","target"],"sources":["/Users/gabrielnathan/WEBSITES/crwn-clothing/src/components/sign-up-form/sign-up-form.component.jsx"],"sourcesContent":["// we need useState to track the FormInput from the FormInput fields\nimport { useState } from 'react';\nimport FormFormInput from '../form-FormInput/form-FormInput.component';\n\nimport { createAuthUserWithEmailAndPassword, createUserDocumentFromAuth } from '../../utils/firebase/firebase.utils';\nimport FormInput from '../form-input/form-input.component';\n\n// object that allows us to keep track of multiple fields inside our form.\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n};\n\nconst SignUpForm = () => {\n  // pass usestate the defaultFormFields value, which is an object with the above values\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formFields; // init values, which will change.\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    const authUser = createAuthUserWithEmailAndPassword();\n    \n    if (password !== confirmPassword) {\n      alert('passwords do not match');\n      return;\n    }\n\n    try {\n      const { user } = await createAuthUserWithEmailAndPassword(\n        email, password\n      );\n      \n      await createUserDocumentFromAuth(user, { displayName });\n      resetFormFields();\n      \n    } catch (error) {\n      if (error.code === 'auth/email-already-in-use') {\n        alert('email already in use')\n      } else {\n        console.log('user creation error', error);\n      }\n    }\n\n  };\n\n\n  const handleChange = (event) => {\n    // the name will come through on the event. \n    // So we can tell our setState which of these fields to update\n    const { name, value } = event.target;\n\n    // set form fields to the object. the '...' SPREADS values to all fields.\n    // [name] - update appropriate field - 'take this value and apply it here, from this variable'\n    // value - gives us the value to update.\n    setFormFields({ ...formFields, [name]: value })\n  };\n\n  return (\n    <div>\n      <h1>\n        Sign up with Email\n      </h1>\n      <form onSubmit={handleSubmit}>\n        <label>Display Name</label>\n        <FormInput\n          type='text'\n          required\n          onChange={handleChange}\n          name='displayName'\n          // we use the values we pulled off our formFields - \n          // ... so the value from the state is the value that's shown on the FormInput\n          // but it's circular - so when the user types those values in:\n          // ... our onChangeHandler pushes the values into the state!\n          // because there's overlap between the name and value, we're able to create this\n          //simple shorthand method of storing and setting this uniform object in our form. \n          value={displayName}\n        />\n\n        <label>Email</label>\n        <FormInput\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email} /> \n\n        <label>Password</label>\n        <FormInput\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password} />\n\n        <label>Confirm Password</label>\n        <FormInput\n          type='password'\n          required\n          onChange={handleChange}\n          name='confirmPassword'\n          value={confirmPassword} />\n\n        <button type='submit'>Sign Up</button>\n\n      </form>\n    </div>\n  );\n}\n\nexport default SignUpForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}